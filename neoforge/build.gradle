import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'com.gradleup.shadow'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.26'
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$neoforge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-neoforge:$architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    // REI
    modLocalRuntime "me.shedaniel:RoughlyEnoughItems-neoforge:$rei_version"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:$rei_version"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:$rei_version"

    // JEI
    modCompileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    // Tomlj
    include("org.tomlj:tomlj:$tomlj_version")
    implementation("org.tomlj:tomlj:$tomlj_version")

    // EMI: waiting for update to 1.21.4
//    modCompileOnly "dev.emi:emi-neoforge:${emi_version}:api"
//    modRuntimeOnly "dev.emi:emi-neoforge:${emi_version}"
    // KubeJs
//    modApi "dev.latvian.mods:kubejs-neoforge:${kubejs_version}"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

base {
    archivesName = archives_name + "-neoforge"
}

modrinth {
    token = System.getenv("MODRINTH_MOD_PUBLISH")
    projectId = "croparia-if"
    versionName = archives_name + "-neoforge-" + mod_version
    versionNumber = mod_version
    versionType = mod_version.endsWith("a") || mod_version.endsWith("alpha") ? "alpha" : mod_version.endsWith("pre") ? "beta" : "release"
    uploadFile = remapJar
    gameVersions = [minecraft_version]
    loaders = ["neoforge"]
    changelog = rootProject.file("changelog.md").text
    dependencies {
        required.project "architectury-api"
        incompatible.project "croparia"
    }
}

tasks.register('curseforge', TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_MOD_PUBLISH")
    def mainFile = upload('971004', remapJar)
    mainFile.displayName = archives_name + "-neoforge-" + mod_version
    mainFile.releaseType = mod_version.endsWith("a") || mod_version.endsWith("alpha") ? "alpha" : mod_version.endsWith("pre") ? "beta" : "release"
    mainFile.changelog = rootProject.file("changelog.md").text
    mainFile.changelogType = 'markdown'
    mainFile.gameVersions = [minecraft_version]
    mainFile.addJavaVersion("Java 21")
    mainFile.addEnvironment("server", "client")
    mainFile.addModLoader("neoforge")
    mainFile.addRequirement("architectury-api")
    mainFile.addIncompatibility("croparia")
}